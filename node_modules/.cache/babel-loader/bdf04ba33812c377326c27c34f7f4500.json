{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactstrap = require(\"reactstrap\");\n\nrequire(\"./animate.css\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar NotificationAlert = function (_React$Component) {\n  _inherits(NotificationAlert, _React$Component);\n\n  function NotificationAlert(props) {\n    _classCallCheck(this, NotificationAlert);\n\n    var _this = _possibleConstructorReturn(this, (NotificationAlert.__proto__ || Object.getPrototypeOf(NotificationAlert)).call(this, props));\n\n    _this.state = {\n      notifyTL: [],\n      notifyTC: [],\n      notifyTR: [],\n      notifyBL: [],\n      notifyBC: [],\n      notifyBR: []\n    };\n    _this.onDismiss = _this.onDismiss.bind(_this);\n    _this.notificationAlert = _this.notificationAlert.bind(_this);\n    return _this;\n  } // to stop the warning of calling setState of unmounted component\n\n\n  _createClass(NotificationAlert, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var id = window.setTimeout(null, 0);\n\n      while (id--) {\n        window.clearTimeout(id);\n      }\n    }\n  }, {\n    key: \"onDismiss\",\n    value: function onDismiss(nNumber, place, noAnimate) {\n      var notify = [];\n      var sNotify = this.state[\"notify\" + place.toUpperCase()];\n      var dNotify;\n\n      for (var i = 0; i < sNotify.length; i++) {\n        if (sNotify[i].key !== nNumber + \"\") {\n          if (sNotify[i].props.className.indexOf(\"fadeOutUp\") !== -1) {\n            dNotify = _react2.default.cloneElement(sNotify[i]);\n          } else {\n            if (noAnimate === undefined) {\n              var animation;\n\n              if (place.indexOf(\"b\") !== -1) {\n                animation = sNotify[i].key > nNumber + \"\" ? \" animated moveDown\" : \"\";\n              } else {\n                animation = sNotify[i].key > nNumber + \"\" ? \" animated moveUp\" : \"\";\n              }\n\n              dNotify = _react2.default.cloneElement(sNotify[i], {\n                className: \"alert-with-icon\" + animation\n              });\n            } else {\n              dNotify = _react2.default.cloneElement(sNotify[i], {\n                className: \"alert-with-icon\"\n              });\n            }\n          }\n\n          notify.push(dNotify);\n        } else {\n          if (noAnimate === undefined) {\n            dNotify = _react2.default.cloneElement(sNotify[i], {\n              className: \"alert-with-icon animated fadeOutUp\"\n            });\n            notify.push(dNotify);\n          }\n        }\n      }\n\n      if (noAnimate === undefined) {\n        setTimeout(function () {\n          this.onDismiss(nNumber, place, \"noAnimate\");\n        }.bind(this), 800);\n      }\n\n      sNotify = {};\n      sNotify[\"notify\" + place.toUpperCase()] = notify;\n      this.setState(sNotify);\n    }\n  }, {\n    key: \"notificationAlert\",\n    value: function notificationAlert(options) {\n      var _this2 = this;\n\n      var notify = this.state[\"notify\" + options.place.toUpperCase()];\n      var nNumber = notify.length;\n\n      if (notify.length > 0) {\n        if (options.place.indexOf(\"b\") !== -1) {\n          nNumber = parseInt(notify[0].key, 10) + 1;\n        } else {\n          nNumber = parseInt(notify[notify.length - 1].key, 10) + 1;\n        }\n      }\n\n      var toggle = void 0;\n\n      if (options.closeButton !== false) {\n        toggle = function toggle() {\n          return _this2.onDismiss(nNumber, options.place);\n        };\n      }\n\n      var notification = _react2.default.createElement(_reactstrap.Alert, {\n        color: options.type,\n        className: \"alert-with-icon animated fadeInDown\",\n        toggle: toggle,\n        key: nNumber\n      }, options.icon !== undefined ? _react2.default.createElement(\"span\", {\n        \"data-notify\": \"icon\",\n        className: options.icon\n      }) : null, _react2.default.createElement(\"span\", {\n        \"data-notify\": \"message\"\n      }, options.message));\n\n      if (options.place.indexOf(\"b\") !== -1) {\n        notify.unshift(notification);\n      } else {\n        notify.push(notification);\n      }\n\n      var sNotify = {};\n      sNotify[\"notify\" + options.place.toUpperCase()] = notify; // aici pui notify[notify.length-1].key\n\n      if (options.autoDismiss > 0) setTimeout(function () {\n        this.onDismiss(nNumber, options.place);\n      }.bind(this), options.autoDismiss * 1000 + (notify.length - 1) * 1000);\n      this.setState(sNotify);\n    }\n  }, {\n    key: \"showAllNotifications\",\n    value: function showAllNotifications(place) {\n      if (this.state[\"notify\" + place.toUpperCase()].length > 0) {\n        var style = {\n          display: \"inline-block\",\n          margin: \"0px auto\",\n          position: \"fixed\",\n          transition: \"all 0.5s ease-in-out\",\n          zIndex: \"1031\"\n        };\n\n        if (place.indexOf(\"t\") !== -1) {\n          style[\"top\"] = \"20px\";\n\n          switch (place) {\n            case \"tl\":\n              style[\"left\"] = \"20px\";\n              break;\n\n            case \"tc\":\n              style[\"left\"] = \"0px\";\n              style[\"right\"] = \"0px\";\n              break;\n\n            case \"tr\":\n              style[\"right\"] = \"20px\";\n              break;\n\n            default:\n              break;\n          }\n        } else {\n          style[\"bottom\"] = \"20px\";\n\n          switch (place) {\n            case \"bl\":\n              style[\"left\"] = \"20px\";\n              break;\n\n            case \"bc\":\n              style[\"left\"] = \"0px\";\n              style[\"right\"] = \"0px\";\n              break;\n\n            case \"br\":\n              style[\"right\"] = \"20px\";\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        return _react2.default.createElement(_reactstrap.Col, {\n          xs: 11,\n          sm: 4,\n          style: style\n        }, this.state[\"notify\" + place.toUpperCase()].map(function (prop, key) {\n          return prop;\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(\"div\", {\n        ref: \"notifications\"\n      }, this.showAllNotifications(\"tl\"), this.showAllNotifications(\"tc\"), this.showAllNotifications(\"tr\"), this.showAllNotifications(\"bl\"), this.showAllNotifications(\"bc\"), this.showAllNotifications(\"br\"));\n    }\n  }]);\n\n  return NotificationAlert;\n}(_react2.default.Component);\n\nexports.default = NotificationAlert;","map":null,"metadata":{},"sourceType":"script"}